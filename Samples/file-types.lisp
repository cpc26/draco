;;;-*-Mode:LISP; Syntax: Common-Lisp;Package:(draco);-*-
;;;
;;;	sample Draco file type specifications
;;;
;;;
;;;	syntax:	(define-file-type [ keyword... ])
;;;
;;;	keywords, mandantory:	:name
;;;				:recognizer
;;;
;;;	keywords, optional:	:documentation
;;;				:super-type
;;;				:reporter
;;;				:reporter-type
;;;
;;;	notes:	file-type names must be unique.  if the specified :name
;;;		(symbol) is identical to the name of an existing file
;;;		type, the existing file-type is redefined accordingly.
;;;
;;;		:super-type (symbol), if provided, must be a file-type
;;;		name (symbol).  the built-in file-type Unix is provided
;;;		for your convenience.
;;;
;;;		a :recognizer (pathname, string, or symbol) must take one
;;;		argument, a file name.  if the recognizer is a symbol, it
;;;		names a Common Lisp function and the file name is a Common
;;;		Lisp pathname.  if the symbol is bound, its value is used.
;;;		(otherwise) if the recognizer is a string or a pathname,
;;;		it names a command that is recognized by the user's shell.
;;;
;;;		recognizer shell commands must print a string describing
;;;		the file-type to stdout when they succeed and print
;;;		nothing when they fail.  recognizer functions must return
;;;		a descriptive string when they succeed and nil when they
;;;		fail.
;;;
;;;		if the file argument is not recognized by any recognizer,
;;;		its file-type is listed as "unknown".
;;;
;;;		the body of the inventory is a series of type-specific
;;;		sections each generated by type-specific reporters
;;;		(Common Lisp functions).  to make life more interesting,
;;;		these type-specific reporters are called "reporters".
;;;
;;;		if no reporter is specified, the function specified by
;;;		*default-reporter* is used.
;;;
;;;		if nil is specified, no output for that file-type will
;;;		be generated.
;;;
;;;		if a non-nil symbol is specified, the function specified
;;;		by that symbol is used and its type is determined by
;;;		reporter-type.
;;;
;;;		there are two types of reporters.  if :reporter-type is
;;;		is :f-sorted (default), the generated report entries are
;;;		sorted by file name.  the only other valid value for
;;;		reporter-type is :c-sorted which indicates that the
;;;		generated entries are to be sorted by their contents.
;;;
;;;
;;;	syntax:	(define-KV-reporter [ keyword... ])
;;;
;;;	keywords, mandantory:	:name
;;;				:lex-function
;;;
;;;	keywords, optional:	:reporter-type
;;;				:report-keywords
;;;
;;;	notes:	define-KV-reporter creates and returns the specified
;;;		KV-reporter instance.  the default :reporter-type is
;;;		:f-sorted, i.e. a reporter that prints out the desired
;;;		keyword-value (KV) pairs found in its input file.
;;;		a KV pair is "desired" if its keyword appears in the
;;;		:report-keywords list.
;;;
;;;		there are two types of f-sorted reporters, both sharing
;;;		the same main loop, that correspond to the two types of
;;;		lexical analyzers that may be used: shell commands and
;;;		Lisp functions.  if the value of :lex-function is a symbol,
;;;		it names a Lisp function taking a pathname as an argument
;;;		and returning a stream of keyword and value tokens.  Each
;;;		token is an ASCII string, possibly containing blanks,
;;;		terminated by a newline character.
;;;
;;;		if :lex-function is a string or a pathname, it names a
;;;		shell command lexical analyzer.
;;;
;;;		a :c-sorted reporter is just like an :f-sorted one
;;;		except it takes a list of pathnames as input and sorts
;;;		the resulting entries by their contents.
;;;

(in-package draco)


#+:alternate-example
(declaim (function GEIS-lex (file-spec) stream))

#+:alternate-example
(defconstant	*GEIS-keyword-length*
	8
	"maximum GEIS keyword length"
)

#+:alternate-example
(defun GEIS-lex (file-spec)
	"GEIS header file lexical analyzer"
	(aver (file-spec file-spec))
	(make-string-input-stream
	  (apply #'concatenate 'string
		 (mapcan
		   #'(lambda (line)
			(aver (string line))
			(list (subseq line 0 *GEIS-keyword-length*)
			      (vector #\newline)
			      (let* ((start (or (position-if
						  (complement
						    #'(lambda (c)
							(aver (character c))
							(or (iswhite c)
							    (eql #\= c))))
						  line
						  :start *GEIS-keyword-length*)
						*GEIS-keyword-length*))
				     (end (position-if
					    (complement #'iswhite) line
					    :start	start
					    :end	(position #\/ line)
					    :from-end	t)))
				    (aver (fixnum start)
					  ((optional fixnum) end))
				    (subseq line start (and end (1+ end))))
			      (vector #\newline)))
		   (collect (scan-file file-spec #'read-line))))))


(define-initialization-file
	:file			"Draco:Samples;GEIS-PODPS-calib-image-p.lisp"
	:documentation		"sample inventory recognizer code"
	:load-immediately	t
)
(define-initialization-file
	:file			"Draco:Samples;GEIS-PODPS-calib-p.lisp"
	:documentation		"sample inventory recognizer code"
	:load-immediately	t
)
(define-initialization-file
	:file			"Draco:Samples;GEIS-data-p.lisp"
	:documentation		"sample inventory recognizer code"
	:load-immediately	t
)
(define-initialization-file
	:file			"Draco:Samples;GEIS-PODPS-dataq-p.lisp"
	:documentation		"sample inventory recognizer code"
	:load-immediately	t
)
(define-initialization-file
	:file			"Draco:Samples;IRAF-image-list-p.lisp"
	:documentation		"sample inventory recognizer code"
	:load-immediately	t
)


(define-file-type
	:name		IRAF-image-list
	:documentation	"IRAF image list"
	:super-type	Unix
	:recognizer	#'IRAF-image-list-p
)

(define-file-type
	:name		FITS
	:documentation	"FITS (generic)"
	:super-type	Unix
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-p")
	:reporter	(define-KV-reporter
			  :name			FITS-reporter
			  :documentation
				"Unix lex-function :c-sorted KV reporter"
			  :lex-function		(make-pathname
							:defaults  *tools-dir*
							:name	   "FITS-lex")
			  :reporter-type	:c-sorted
			)
	:reporter-type	:c-sorted
)
(define-file-type
	:name		FITS-comp
	:documentation	"FITS (comparison)"
	:super-type	FITS
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-comp"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'FITS))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		FITS-object
	:documentation	"FITS (object)"
	:super-type	FITS
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-object"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'FITS))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		FITS-calib
	:documentation	"FITS (calibration)"
	:super-type	FITS
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-calib"
					:type	   "sh")
	:reporter	(define-KV-reporter
			  :name			FITS-calib-reporter
			  :documentation
				"Unix lex-function :c-sorted KV reporter"
			  :lex-function		(make-pathname
							:defaults  *tools-dir*
							:name	   "FITS-lex")
			  :reporter-type	:c-sorted
			)
	:reporter-type	:c-sorted
)
(define-file-type
	:name		FITS-bias
	:documentation	"FITS (bias)"
	:super-type	FITS-calib
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-bias"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'FITS-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		FITS-averaged-bias
	:documentation	"FITS (averaged bias)"
	:super-type	FITS-bias
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-avg-bias"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'FITS-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		FITS-dark
	:documentation	"FITS (dark)"
	:super-type	FITS-calib
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-dark"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'FITS-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		FITS-averaged-dark
	:documentation	"FITS (averaged dark)"
	:super-type	FITS-dark
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-avg-dark"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'FITS-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		FITS-flat
	:documentation	"FITS (flat)"
	:super-type	FITS-calib
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-flat"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'FITS-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		FITS-averaged-flat
	:documentation	"FITS (averaged flat)"
	:super-type	FITS-flat
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "FITS-avg-flat"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'FITS-calib))
	:reporter-type	:c-sorted
)

(define-file-type
	:name		GEIS
	:documentation	"GEIS (header)"
	:super-type	Unix
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "GEIS-p")
)
(define-file-type
	:name		GEIS-PODPS-calib-image
	:documentation	"GEIS (PODPS) calibrated image"
	:super-type	GEIS
	:recognizer	#'GEIS-PODPS-calib-image-p
	:reporter	(define-KV-reporter
			  :name			GEIS-reporter
			  :documentation
				#+:alternate-example
				"CL lex-function :c-sorted KV reporter"
				#-:alternate-example
				"Unix lex-function :c-sorted KV reporter"
			  :lex-function		#+:alternate-example
						GEIS-lex
						#-:alternate-example
						(make-pathname
							:defaults  *tools-dir*
							:name	   "GEIS-lex")
			  :reporter-type	:c-sorted
			)
	:reporter-type	:c-sorted
)
(define-file-type
	:name		GEIS-PODPS-calibration
	:documentation	"GEIS (PODPS) calibration"
	:super-type	GEIS
	:recognizer	#'GEIS-PODPS-calib-p
)
(define-file-type
	:name		GEIS-PODPS-data-quality
	:documentation	"GEIS (PODPS) data quality"
	:super-type	GEIS
	:recognizer	#'GEIS-PODPS-dataq-p
)
(define-file-type
	:name		GEIS-data
	:documentation	"GEIS data"
	:super-type	Unix
	:recognizer	#'GEIS-data-p
	:reporter	nil
)

(define-file-type
	:name		OIF
	:documentation	"OIF (header)"
	:super-type	Unix
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-p"
					:type	   "sh")
	:reporter	(define-KV-reporter
			  :name			OIF-reporter
			  :documentation
				"Unix lex-function :c-sorted KV reporter"
			  :lex-function		(make-pathname
							:defaults  *tools-dir*
							:name	   "phead"
							:type	   "e")
			  :reporter-type	:c-sorted
			)
	:reporter-type	:c-sorted
)
(define-file-type
	:name		OIF-comp
	:documentation	"OIF (comparison)"
	:super-type	OIF
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-comp"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'OIF))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		OIF-object
	:documentation	"OIF (object)"
	:super-type	OIF
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-object"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'OIF))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		OIF-calib
	:documentation	"OIF (calibration)"
	:super-type	OIF
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-calib"
					:type	   "sh")
	:reporter	(define-KV-reporter
			  :name			OIF-calib-reporter
			  :documentation
				"Unix lex-function :c-sorted KV reporter"
			  :lex-function		(make-pathname
							:defaults  *tools-dir*
							:name	   "phead"
							:type	   "e")
			  :reporter-type	:c-sorted
			)
	:reporter-type	:c-sorted
)
(define-file-type
	:name		OIF-bias
	:documentation	"OIF (bias)"
	:super-type	OIF-calib
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-bias"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'OIF-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		OIF-averaged-bias
	:documentation	"OIF (averaged bias)"
	:super-type	OIF-bias
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-avg-bias"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'OIF-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		OIF-dark
	:documentation	"OIF (dark)"
	:super-type	OIF-calib
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-dark"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'OIF-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		OIF-averaged-dark
	:documentation	"OIF (averaged dark)"
	:super-type	OIF-dark
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-avg-dark"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'OIF-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		OIF-flat
	:documentation	"OIF (flat)"
	:super-type	OIF-calib
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-flat"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'OIF-calib))
	:reporter-type	:c-sorted
)
(define-file-type
	:name		OIF-averaged-flat
	:documentation	"OIF (averaged flat)"
	:super-type	OIF-flat
	:recognizer	(make-pathname	:defaults  *tools-dir*
					:name	   "OIF-avg-flat"
					:type	   "sh")
	:reporter	(reporter (get-instance 'file-type :name 'OIF-calib))
	:reporter-type	:c-sorted
)
